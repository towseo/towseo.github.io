{"title":"DAY 2 Learning Python","slug":"day2","date":"2021-09-21T17:12:11.000Z","updated":"2021-09-21T17:12:11.970Z","comments":true,"path":"api/articles/day2.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<h1 id=\"Towseo’s-DAY-2-Learning-Python\"><a href=\"#Towseo’s-DAY-2-Learning-Python\" class=\"headerlink\" title=\"Towseo’s DAY 2 Learning Python\"></a>Towseo’s DAY 2 Learning Python</h1><h2 id=\"DAY2-【page-23-27】\"><a href=\"#DAY2-【page-23-27】\" class=\"headerlink\" title=\"DAY2 【page 23-27】\"></a>DAY2 【page 23-27】</h2><blockquote>\n<p>#practice 1</p>\n</blockquote>\n<pre><code>#函数str()将数值转换为字符串\nage = 23\nmassage = &quot;Happy &quot; + str(age) + &quot;rd Birthday!&quot;\nprint(massage)\n</code></pre>\n<blockquote>\n<p>#practice 2</p>\n</blockquote>\n<p>#2-9将你最喜欢的数字存储在一个变量中，再使用这个变量创建一条消息，指出你最喜欢的数字，然后将这条消息打印出来。</p>\n<pre><code>favorite_number = 8\nmassage_2 = &quot;My favorite number is &quot; + str(favorite_number) + &quot;.&quot;\nprint (massage_2)\n</code></pre>\n<blockquote>\n<p>#PYTHON 指导原则</p>\n</blockquote>\n<p>1.”The Zen of Python, by Tim Peters”</p>\n<p>2.Beautiful is better than ugly.</p>\n<p>3.Explicit is better than implicit.</p>\n<p>4.Simple is better than complex.</p>\n<p>5.Complex is better than complicated.</p>\n<p>6.Flat is better than nested.</p>\n<p>7.Sparse is better than dense.</p>\n<p>8.Readability counts.</p>\n<p>9.Special cases aren’t special enough to break the rules.</p>\n<p>10.Although practicality beats purity.</p>\n<p>11.Errors should never pass silently.</p>\n<p>12.Unless explicitly silenced.</p>\n<p>13.In the face of ambiguity, refuse the temptation to guess.</p>\n<p>14.There should be one– and preferably only one –obvious way to do it.</p>\n<p>15.Although that way may not be obvious at first unless you’re Dutch.</p>\n<p>16.Now is better than never.</p>\n<p>17.Although never is often better than <em>right</em> now.</p>\n<p>18.If the implementation is hard to explain, it’s a bad idea.</p>\n<p>19.If the implementation is easy to explain, it may be a good idea.</p>\n<p>20.Namespaces are one honking great idea – let’s do more of those!</p>\n<blockquote>\n<p>#practice 3</p>\n</blockquote>\n<pre><code>#列表打印\nbicycles = [&#39;trek&#39;, &#39;cannondale&#39;, &#39;redline&#39;, &#39;specialized&#39;]\nprint(bicycles[0].title())#首字母大写\nprint(bicycles[0].upper())#全部大写\nprint(bicycles[0].lower())#全部小写\nprint(bicycles[1])#索引是从0开始\nprint(bicycles[-1])#索引[-1]代表从倒数第1个开始\n</code></pre>\n<blockquote>\n<p>#practice 4</p>\n</blockquote>\n<p>#3-1将一些朋友的姓名存储在一个列表中，并将其命名为names 。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来。</p>\n<pre><code>print (&quot;3-1&quot;)\nnames = [&#39;charles&#39;, &#39;cark&#39;, &#39;bill&#39;, &#39;vincent&#39;, &#39;william&#39;]\nprint (names[0].title())\nprint (names[1].title())\nprint (names[2].title())\nprint (names[3].title())\nprint (names[4].title())\n</code></pre>\n<p>#3-2继续使用练习3-1中的列表，但不打印每个朋友的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，但抬头为相应朋友的姓名。</p>\n<pre><code>print (&quot;3-2&quot;)\nnames = [&#39;charles&#39;, &#39;cark&#39;, &#39;bill&#39;, &#39;vincent&#39;, &#39;william&#39;]\nmassage_2 = &quot;Hello&quot; + names[0].title() + &quot;, nice to meet you!&quot;\nmassage_3 = &quot;Hello&quot; + names[1].title() + &quot;, nice to meet you!&quot;\nmassage_4 = &quot;Hello&quot; + names[2].title() + &quot;, nice to meet you!&quot;\nmassage_5 = &quot;Hello&quot; + names[-2].title() + &quot;, nice to meet you!&quot;\nmassage_6 = &quot;Hello&quot; + names[-1].title() + &quot;, nice to meet you!&quot;\nprint (massage_2)\nprint (massage_3)\nprint (massage_4)\nprint (massage_5)\nprint (massage_6)\n</code></pre>\n","categories":[],"tags":[]}