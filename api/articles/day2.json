{"title":"DAY 1 Learning Python","slug":"day2","date":"2021-09-21T16:38:29.000Z","updated":"2021-09-21T16:38:29.400Z","comments":true,"path":"api/articles/day2.json","photos":[],"link":"","excerpt":null,"covers":null,"content":"<p>DAY2 【page 23-27】</p>\n<blockquote>\n<p>#practice 1<br>#函数str()将数值转换为字符串</p>\n</blockquote>\n<p>age = 23</p>\n<p>massage = “Happy “ + str(age) + “rd Birthday!”<br>print(massage)</p>\n<blockquote>\n<p>#practice 2<br>#2-9将你最喜欢的数字存储在一个变量中，再使用这个变量创建一条消息，指出你最喜欢的数字，然后将这条消息打印出来。</p>\n</blockquote>\n<p>favorite_number = 8<br>massage_2 = “My favorite number is “ + str(favorite_number) + “.”</p>\n<p>print (massage_2)</p>\n<blockquote>\n<p>#PYTHON 指导原则<br>#”The Zen of Python, by Tim Peters”</p>\n</blockquote>\n<p>#Beautiful is better than ugly.<br>#Explicit is better than implicit.<br>#Simple is better than complex.<br>#Complex is better than complicated.<br>#Flat is better than nested.<br>#Sparse is better than dense.<br>#Readability counts.<br>#Special cases aren’t special enough to break the rules.<br>#Although practicality beats purity.<br>#Errors should never pass silently.<br>#Unless explicitly silenced.<br>#In the face of ambiguity, refuse the temptation to guess.<br>#There should be one– and preferably only one –obvious way to do it.<br>#Although that way may not be obvious at first unless you’re Dutch.<br>#Now is better than never.<br>#Although never is often better than <em>right</em> now.<br>#If the implementation is hard to explain, it’s a bad idea.<br>#If the implementation is easy to explain, it may be a good idea.<br>#Namespaces are one honking great idea – let’s do more of those!</p>\n<blockquote>\n<p>#practice 3<br>#列表打印</p>\n</blockquote>\n<p>bicycles = [‘trek’, ‘cannondale’, ‘redline’, ‘specialized’]</p>\n<p>print(bicycles[0].title())#首字母大写</p>\n<p>print(bicycles[0].upper())#全部大写</p>\n<p>print(bicycles[0].lower())#全部小写</p>\n<p>print(bicycles[1])#索引是从0开始</p>\n<p>print(bicycles[-1])#索引[-1]代表从倒数第1个开始</p>\n<blockquote>\n<p>#practice 4<br>#3-1将一些朋友的姓名存储在一个列表中，并将其命名为names 。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来。</p>\n</blockquote>\n<p>print (“3-1”)</p>\n<p>names = [‘charles’, ‘cark’, ‘bill’, ‘vincent’, ‘william’]</p>\n<p>print (names[0].title())</p>\n<p>print (names[1].title())</p>\n<p>print (names[2].title())</p>\n<p>print (names[3].title())</p>\n<p>print (names[4].title())</p>\n<p>#3-2继续使用练习3-1中的列表，但不打印每个朋友的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，但抬头为相应朋友的姓名。</p>\n<p>print (“3-2”)</p>\n<p>names = [‘charles’, ‘cark’, ‘bill’, ‘vincent’, ‘william’]</p>\n<p>massage_2 = “Hello” + names[0].title() + “, nice to meet you!”</p>\n<p>massage_3 = “Hello” + names[1].title() + “, nice to meet you!”</p>\n<p>massage_4 = “Hello” + names[2].title() + “, nice to meet you!”</p>\n<p>massage_5 = “Hello” + names[-2].title() + “, nice to meet you!”</p>\n<p>massage_6 = “Hello” + names[-1].title() + “, nice to meet you!”</p>\n<p>print (massage_2)</p>\n<p>print (massage_3)</p>\n<p>print (massage_4)</p>\n<p>print (massage_5)</p>\n<p>print (massage_6)</p>\n","categories":[],"tags":[]}